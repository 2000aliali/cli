---
# Source: harbor/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: RELEASE-NAME-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.7
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
---
# Source: harbor/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA=="
---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-chartmuseum-secret
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/core/core-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-core-envvars
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
type: Opaque
data:
  _REDIS_URL_CORE: "cmVkaXM6Ly9SRUxFQVNFLU5BTUUtcmVkaXMtbWFzdGVyOjYzNzkvMA=="
  _REDIS_URL_REG: "cmVkaXM6Ly9SRUxFQVNFLU5BTUUtcmVkaXMtbWFzdGVyOjYzNzkvMg=="
  REGISTRY_CREDENTIAL_USERNAME: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "VEdhVlpwTjBaczI5ZnNKQlk5Z0Z6TWNSSTBoWmg1azY="
  HARBOR_ADMIN_PASSWORD: "bWFyb3VhbmVt"
  POSTGRESQL_PASSWORD: "bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA=="
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-core
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
type: Opaque
data:
  secretKey: "N2dMdjM4VXFtekRyOWxiZQ=="
  secret: "eUVEa2RJUTRTcVZWZkxYcw=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZrekNDQTN1Z0F3SUJBZ0lKQUxyK0xWT0VzdytzTUEwR0NTcUdTSWIzRFFFQkN3VUFNR0F4Q3pBSkJnTlYKQkFZVEFrVlRNUkF3RGdZRFZRUUlEQWRUWlhacGJHeGxNUkF3RGdZRFZRUUhEQWRUWlhacGJHeGxNUkF3RGdZRApWUVFLREFkQ2FYUnVZVzFwTVJzd0dRWURWUVFEREJKb1lYSmliM0l1WW1sMGJtRnRhUzVqYjIwd0hoY05NVGt3Ck5USXdNVEF3TVRVeldoY05NakF3TlRFNU1UQXdNVFV6V2pCZ01Rc3dDUVlEVlFRR0V3SkZVekVRTUE0R0ExVUUKQ0F3SFUyVjJhV3hzWlRFUU1BNEdBMVVFQnd3SFUyVjJhV3hzWlRFUU1BNEdBMVVFQ2d3SFFtbDBibUZ0YVRFYgpNQmtHQTFVRUF3d1NhR0Z5WW05eUxtSnBkRzVoYldrdVkyOXRNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFnOEFNSUlDQ2dLQ0FnRUFxb0c4ZnNud0NwZittV1k3b2p4VENxYXNOVnVEUXY4NGtsajFHa003ZEpGTlZwMEoKVzV1WklaUit2dURxNFZJdXZxZWV1Y085RjF4TWFGaEdxZlZpYnVld0VEMm9XSTRZMkttMytUOWEwcjZ0RkthagphSXlwNTdPSFh5c1hjaE9KOHp5dGRsYW5kaWk4elBBYS9sSDBiak9HR3liTk5NWjlFa3NEbk5YTTlZTFA5NURICmpzSFJ1b0l0NWlRb0lKWHFoYW8vREV3YUJjZHhXS08rd1NFRm5lTzBOSWlpeXR2VGh1NGw2aDhETlZEWHhzUDAKc2o3ZHZWZXFZMTBjMUREM0pLK1o1MHJOWWw1Qjk1V0hmVGttTnNISmxiOHYxc3Q5dDk4eTM0K01rRE1HUUpLTwpYZVFQTHdDREtJbUw3bnd5K2NqVWlIbHdFWTM5bEVBYzdBVWw0UUZ3alMzOFIxWjlLNU5Ld1FiQU11TGlVZUltCnk4VkZvMTRjL0FsTEU5cUhaTHEzOGJGaGVKb0J5aThvWTQ2ZTZDV0pUTVRzZnJsZ1ZXR1NDVW9PbXBDM0ZmK2wKdUNVK3B0ZmtGSHoybFF1Vk1qK1U3dlJrZ0tncnF0b21KSVBzcW9LdzF3S1Fwb1g5a2puVUNwdGc0R204c04vUgpMOUllQklCeGRXWGxlL2dsZk1PUi9XbmtVZ2Fqc2o3bVhnZ3QzcjluSVRoNlpSTVlTUjV1dmNEM2V1bCtibVhFCm4xcWY5V1dDUUpHZzYrRHpidWw4VTAwL3NzdGlha29PSERMc3Q4SGFaeTFOZk5SUG03WU5WZ3V5cXI2b1g0Q08Kb25NNG02eWJvRitqUExDdWZYVTZFYXZUM0U0S0FTNFJoVHNvd2pjMHIvcENTZk5kYzdFT0QxYm5wdDBDQXdFQQpBYU5RTUU0d0hRWURWUjBPQkJZRUZJUWd3QU45Vlh5LzFXME5YbDdFREw4RkUzZ0hNQjhHQTFVZEl3UVlNQmFBCkZJUWd3QU45Vlh5LzFXME5YbDdFREw4RkUzZ0hNQXdHQTFVZEV3UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUwKQlFBRGdnSUJBREppMkdockZNSDJoQWNKV2JZRmJKc25GUm5DOVBIRzI0aFJpTTYyYkJDY3V6RWVycjdEM05SRQo5cVhhditLaVptVk4vT2Nxd3VIZFVtcDV0djh2OGxMQTEzWi9YMlZhSG1zVmtCKzAySkFTY3Bqb25FMEw4VUFwCjQrQnJxL3RDMTVzK2w2ZzZwSEI5SjlYUDBJd25zUEJEb1ZkQXpJay91enRERVJmakNBeW9NNFdxcmpYSVhwNHUKeVRXRG9EUWFIcFFTZGZaQUpjdjd0ODJKSmUxSjl2YmUrdEZtRGdNY2ZJb2VDcUN0MWZrWWYvdXNGRk02bUxhKwpndEhuSUFJR0x2R2pEUi9SdFNsYnZHY1JycXZveUszWHg0V29Zek5PZkM2ZTZuRVNsa1RQako2UHlScXFHaGJMCkZHK1Y2RVBZRHovRTYzVkd0eE5hWitNUWNqSGprNHE3YzhwQUwxRkUxOUpwb2VhRUFITEtCUkhBcUpiS3NPWmgKV1NtdkNYMjN1Tk9yeW1hZ2g3TjZwR3lCQzVZSmN0cm9hWGwrclBPZE5qQm5pbVp3OUJseGxaTHZRTFRUaUw0egpsU1dQdXpSZHhibFNMR0VHUGZZNndJOWplR0o2dy94T09EQUhObVBLTGllbkg5VFZVcHBvTC9UY0pEU28xTDJUCnEyK0RQYnJZSko1c0dtUnVFcWpvcERkTE9Dc3Rhbk9BemRHckkvdkVRZEtEL1p6a1JLaktEWS9rRDJuWGdzVE8KZndhUHZ4amhNVFJtU1BSWDEwQTZ6QzIyUXUzT1JFRFc0OEVML0U3Mkl3blFQd0hVM0ZHVXJVZDluZGFYYTB2RQpVcVppV3REKy9TSW1QV013UGhxVnF0L3p3cG1DWkJYTndrdjVmZ0hRY28vZUdqRFhraXhsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcW9HOGZzbndDcGYrbVdZN29qeFRDcWFzTlZ1RFF2ODRrbGoxR2tNN2RKRk5WcDBKClc1dVpJWlIrdnVEcTRWSXV2cWVldWNPOUYxeE1hRmhHcWZWaWJ1ZXdFRDJvV0k0WTJLbTMrVDlhMHI2dEZLYWoKYUl5cDU3T0hYeXNYY2hPSjh6eXRkbGFuZGlpOHpQQWEvbEgwYmpPR0d5Yk5OTVo5RWtzRG5OWE05WUxQOTVESApqc0hSdW9JdDVpUW9JSlhxaGFvL0RFd2FCY2R4V0tPK3dTRUZuZU8wTklpaXl0dlRodTRsNmg4RE5WRFh4c1AwCnNqN2R2VmVxWTEwYzFERDNKSytaNTByTllsNUI5NVdIZlRrbU5zSEpsYjh2MXN0OXQ5OHkzNCtNa0RNR1FKS08KWGVRUEx3Q0RLSW1MN253eStjalVpSGx3RVkzOWxFQWM3QVVsNFFGd2pTMzhSMVo5SzVOS3dRYkFNdUxpVWVJbQp5OFZGbzE0Yy9BbExFOXFIWkxxMzhiRmhlSm9CeWk4b1k0NmU2Q1dKVE1Uc2ZybGdWV0dTQ1VvT21wQzNGZitsCnVDVStwdGZrRkh6MmxRdVZNaitVN3ZSa2dLZ3JxdG9tSklQc3FvS3cxd0tRcG9YOWtqblVDcHRnNEdtOHNOL1IKTDlJZUJJQnhkV1hsZS9nbGZNT1IvV25rVWdhanNqN21YZ2d0M3I5bklUaDZaUk1ZU1I1dXZjRDNldWwrYm1YRQpuMXFmOVdXQ1FKR2c2K0R6YnVsOFUwMC9zc3RpYWtvT0hETHN0OEhhWnkxTmZOUlBtN1lOVmd1eXFyNm9YNENPCm9uTTRtNnlib0YralBMQ3VmWFU2RWF2VDNFNEtBUzRSaFRzb3dqYzByL3BDU2ZOZGM3RU9EMWJucHQwQ0F3RUEKQVFLQ0FnQVUvalk4RWhibzV2L2syUzU4Y2hyelU4UWVLYTlHbjIvU3JQczRpWkNYY0pCcUdwbWRXdElHeldheApqN1c3bWtmQkY1ZzJYUUE2RVJZalBzTXNoOWJmdXN6MW92SElQVzZYdG9XOVBXeXNSK2U5aENyWVk0RkQwdG5YCkFOSTVMR2l1dHdqUWFpamlKbS9nZDZ1TEpvSUcwM2N1ZnArRFlQRGpRTE1vS3phNS82b2xYQUVGOVowaDdvZEMKTDY5MUc2QXRadUd1WE94VFM5UUx5dFZncC9VdUZHd0tqOHdqVjk5NlhIWDBsbTdwc0pOd21JM1hLR0Jhd0tGcwo3SGp4TXpvcW5TaEF6dmZzcFpoUHFHeHZJWXN2OExvbUlzejhFRC9oVkt6SjA3M0Z2MUtFdnNhaWpzTEQwYmRVClZXTVNNTjZCM0pVMlhHVk05QU9GcmtNaFdCenFuS2ZSM3FubXRoWTk1RG1nNWM1T0pPQW5pWTZDelZyL0xaemUKRnk3WXA2ZGhvK0dGZDJpT28wTGJvaVVWcytxUG9MUkdpYURpc1ZpQ1c3NG1Eait1YXZzeDBGTmFsV09KM29aYgpRUWZjQzJFRVJjSUpGZUlVeG55a3B5dnNxOW1SNm5sSkE1bTBVWEwreVRwK2l4R1NrTXg3aEd4azdXNGlJK1RFCjdTWWtkcE1wckR0TmQ0NkNDcEVqTDRjcDN3S3FPODNESFpiUmlJQlc0TG5tdjgvRmsxMzl4ZmFWS1UxYThPejYKZUl2N1NBakppQ1Zwaml6N1cyWHZGSU02R0lkaXZxSjV0ZURIVUtWZ2JnSFZWWFd6ZTlGTGZVbldlNnhYeGs3UAo3d0FqaFBBOEtNWDAvU2tOTzlzQ284TzBiVkxnbWhRVFpQZWRCbjQvaVZqais2M1BRUUtDQVFFQTJwbXZLakRuCk1kT3FLdzdjdXNXR0IwTHRkeHpnWXQ4RVZYRnFjZHdRSWs4ajJiams5VGZnR3NlQW1BZnd2bCtwbXoyNDlLSGEKOTk1RmpPU01JZ0FCQUE3MWxWQ1ZQZ1MrOVk4NWVnbXlxNmpVcW1kbHJyWlBpQW00RE85UXo2eElGSlRmTEUxawpXajhlZW9PNkVxTWloN21RMGtrK3g0aEJTRS9QRWJxak1ZRE9OcTd3dWtwNG5WLzJ4eUxSVEFrejhkellRNEVxCjVVSEFlSDZXVVJSTTROY1IveHNaeDFXZzBZZU1QY3lGdy96KzlnUzR2cDlZNkdhangvOVByQWhmSmNpcE0vcTgKRDZaQWZpSCtsbW0yb0IzeGQyUUtHN0JZN1pJeHgvZDRSemtsb0FVaTlraG10c21mSTk1LzVPNjVuWTU0QnZJVwpGQ0JWNEg4ekxueEhzUUtDQVFFQXg2MmpWbUtxcXpjUnR5OHloU3ptVHdCK1dRUkN3MVRPU1d3WCs1aUVpMk9sClVQUVgxMm9vU1Y5UXdxb004S203Z0g2dVR1WGw5aUs3eDVjZzBmWEV5WDJ1NmVZZzhjRm1vUC91V2l0UndpVnIKclNjNlJyQzlwNy9ndVRWUElIWmo0MTBPSE15aTNqSGRlL01rT2UzaDJVa3kzcHhNZTNjcEJ6NTJoUTQxem4zWApSa1BLOUJFM2NoeE41VVd0dVk1dlpYSTFEYWlqYjkxWHlac0VZM2RFSklYeTJVOVovS3MvSjJIdDdRV2NwblpuClNyZHFPQitPa25Qb2NPcHo5R1ZtZVRIdThyMkpyWUxXanUrMWhIc1ZRY09YU3hWWWZnV1k3Ulc3OG9CUlBpamgKSk81eHEvNXNWR1Ywa3o4Si8rdmN1VnFwd0dScG5QUWxGOFVxUUFmSTdRS0NBUUVBaDNQTlQyWm9DNzd0WmFyYQo2VHgxdFZBcVZyRms5TDdlTDVlTWJxcitzRk83a2pCNFp0NU5saXBpcTFIWVFnNkN5UGZ4QUZ5K2t2Sit4RFBtCkJUZGRaMHpkcmJ6MkRTemhxc1VweDAzMUVWc1hFOVBuOU45dzNvbXZLd3lyVlZPYWdtNVE3Mkd4T2g1OFkwdjIKWTVBRVdIZUtubExXZk1zWU1KZUxacC93ZVQ4b0NFaFVVQXJQUEN6M2ZDTTk3MUNRaUdEZy9Nc3Y2a2pZMjVFTQowWWF6c0dwejgxQTJwQWFTRk9OWjZmMHVNZWcxai9vVEE4TTNVeUl1Z0VIYWUyM2dqMGdNV0hJWVQ5WWpoa1RJClBTbWFDUk1reVdjS3dHZUFZdzFBblhqaFpiaXFjTUplREorR1RlTVhJaUcvdS9xVXQyVk5TSGgvWjg4MWgxc3EKT3JhMXNRS0NBUUJJd2ZScVhibGllY1p5d1RmZlh1VHNsSGwxWmlBTm5MRXQvNzBkYUEyajNNTTRKRGtydlByQgpBWUlqN0dLYXJyNHJxLzFIc20yQXFsZFIrcmR5eWVMU3FJRTdxU2NIOERpOUlZUndScWliM1piR21TeWE1WHUxCnpDek9UNlp0WmJZditwQlIzaDdhWjhFVWtSdjZIN3ZUdU9CWVRRdHhVWklabWFFR0NvK0Fsa29DeUdFRFhlS2UKS2NJWWNMTkVrYW4xaFEvZjBqcjdYK1BGQ2o4bkh5WXRTTUdjZlZXRXc4RlhVRStwdGduR2ZnNVZJMUFJOHphNApGcFB6MFBvL2ExTlRoZVpUZk16VjlIN0p4bjZWcjJPbmV1Vjk3bUU0U2tIVzRieUNPRTlpSHZNcXlkZVJuRHRNCjVVcjgvRk5nZFVrUUlRRUpvWXo2Szl2NE5WZVh6VDVoQW9JQkFBb0x0eXI0R2ZONE44eTNXRngwcVZXSWVLcm8Kem5USjNEOW5HYkdTS1pERlRQTmI4blBmWTlLTko1R0hhTHJWWkxnQ3Z1TmtSbWh5OERFNXkwNitEZ2xjQS9ERQp0VHgzdTNvb3ZqNHVBdW1OK2dxR0JLRDZWQ0c1amN1SHZlcUliRGZzbDFaWXlTa2s0MCtjZkVseUN0b01MNUpaCkdLVFlTWi9ReTRDeG1LV1FjYkhBMTJvRXAvWWJPc1cwakxTbk1WREY1VDYyRlY2UkdaL2FkYmFQejYvYm9LQ1kKdEx0cTkzUHhtaFVkMWVaempvZHljRU8zMk5wVnk3T0NYWlhocnZBWmV6Zkp5dDcxcVh6UUhZVWxMQ1BVa2YvZQpDN0l3R2FETUlxNGdCKzFVUDd6bHhXVUlFTnFUVlREZzdVNitCdlhvS3cyZTd3eU4xc1lsOS96UXJvST0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-ingress
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROakNDQWg2Z0F3SUJBZ0lRSHhpNnN1U2JqN2ZYZUdsZTZBMHM0REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakV4TWpJNU1URTFOREUzV2hjTk1qSXhNakk1TVRFMQpOREUzV2pBYk1Sa3dGd1lEVlFRREV4Qm9ZWEppYjNJdWFHRmthWFJvTG0xaE1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQThkYlEzTWxtSDRvOWJLVzhQeVFLWlY2ek1jT3BrQlQzdVNLcUJrSysKWG1yUktwWnd5UUtNckRMRFJwbFo1d04wS0E5MlBwWUR0aXRoNWFaVUU1bHlHUWxsRFpYaTc1ckxIZyt1dnNWbQpFWmxHaEdVZHhKYTgzUFhPdCtMNkNvS2JlS0lELzN0UTd4cVQ4K3dRUGdCcUtaRjVLSEwxa2ZRWWhIZWRmRnpGClYrS1FsamNHZUZRNEQ3SGR6K1JJWFJ3b3pkMVc0NFlPQnA1Y3JJbGhWQWErUTZ3RnBZWXNOY0d4eGMvbENrd1kKTnI5UGZQYTEwdmlMRm0vN0xhTVROMFFRQjJOT1gyVmxpWVAvTE5GdmxVQmRDVWFTQWRQOWM5QkpsdUg4WjFpQgpaNURhaHBYcmxGLzR4Q2FCQkppQlBzdnZKTHhubVNBay94Y1Q1aEpmZDBLbkdRSURBUUFCbzMwd2V6QU9CZ05WCkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWQKRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVTl0Wng5VTFpSEdpSW5reHR1Ni95Ly9QTGEyd3dHd1lEVlIwUgpCQlF3RW9JUWFHRnlZbTl5TG1oaFpHbDBhQzV0WVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUNIYkEzaTNjCkNuUkRBdU1RMUFzZCtxWnZmOEpZbGx1OC9ZTG1JK0F2RlllWDEzOVd2cXFncVpnVm85U2RrYnhZbEs2andacEYKbUYwZFFUbElZRlk5eG4zV2J4VjEvWUNFaEo4MDlsM3RxTnRsVjNvTUFYV21DTm5heG1zU0NjbmtyR0luekwrMQpIV0JZdEV0R0REVnhHd0djUFpYTWU0NlBTbmdpY1ZsSmE2VkV2Ky9DOUkvSElHTWo2eGJleXdUanlPTzRrKzVtCi9SVmNFQ0JvcXZQNUJhOE83MGN6QzN1WHpsUlRGRnF0RnlXUHFwZkw3enBxL2tnLzdKYmVNMjhCQ0tpMkxqdFYKZVF1SDVwWENsdlZtemdpcGw2Mmdyd29VS1hqMndyam9maW5RVW5IT2Z4UXUrWWRONzBmQTRBSnNPYjFzTnplcgpibldQNjdzT0E3Zldvdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOGRiUTNNbG1ING85YktXOFB5UUtaVjZ6TWNPcGtCVDN1U0txQmtLK1htclJLcFp3CnlRS01yRExEUnBsWjV3TjBLQTkyUHBZRHRpdGg1YVpVRTVseUdRbGxEWlhpNzVyTEhnK3V2c1ZtRVpsR2hHVWQKeEphODNQWE90K0w2Q29LYmVLSUQvM3RRN3hxVDgrd1FQZ0JxS1pGNUtITDFrZlFZaEhlZGZGekZWK0tRbGpjRwplRlE0RDdIZHorUklYUndvemQxVzQ0WU9CcDVjcklsaFZBYStRNndGcFlZc05jR3h4Yy9sQ2t3WU5yOVBmUGExCjB2aUxGbS83TGFNVE4wUVFCMk5PWDJWbGlZUC9MTkZ2bFVCZENVYVNBZFA5YzlCSmx1SDhaMWlCWjVEYWhwWHIKbEYvNHhDYUJCSmlCUHN2dkpMeG5tU0FrL3hjVDVoSmZkMEtuR1FJREFRQUJBb0lCQVFERXpDMk03YXRZRVRPbwovVG15SEE4RnJNbWZ2bngyamttRWM2dnVpbFBHRzZCNHlwR2ZVWjdONWtVNFowUmNsRmZxM2FJNGpmVVpRalpaCkhrQWU3dWlGYlRxNWtuWm95d3R0UEEvVW1HaFYrK2dCaHhOeFRjVUUvbGFwRjJDb090NXZqVkE1ajgwdHRmQWUKTjhTRDMreUVSU2hWL1M3UEJkY0p2UmtBQWJKcHI1VkdzZmh5Rmg0cXowY2tmcm91U0ZEc252aldXK2NaT0N6MApWWnRSVWF3NG1GeUNWVXRnVWVMRktkMjVtK3owdGU3RzNpY0NqMUl6TzA2bDh2WFVrK1dSRHlKQTg2bkFaK1VuCmRRSm5VSUZuMWtyRE04M2VHcEM3dEJWTTd0alllejZrbndNei9Oemtpb2RWdExndXVNNTZ4MGJ0QzErb1hDZEsKRzRHMHlwMEJBb0dCQVBxY055dTlHdm5aVEIvVFFIQjlMdnEzRjU3cHZ5elIyNWlLbVFVLytFYVMwckNIVXBvYwpONk00S0NUZ29Yc29NUi94WFFkbkVpUVY4SHJYRG9pYmx4SDNwQlNrdGg2bWVnY283Z0M1MlhzRXM2RHIwTGc1CjM3c2NqNm9xcmpJY0tZcG8rYnlSaG1tMFBxVG52a201dEViNy9oZXBnM3RqRGlHQnM1S0JEWjRoQW9HQkFQY0sKVHpKSU42d1F6Z3FVZ25xQ3RYVk01U3dYVjdXZW5sZGdacjUvVmlIUVUzQ1NaRGVwTGZSczhZOG50dVk2YTVhWQo0TWNmNzJKN2Q2ZFBWRGwzc3hHYzdDN0tCWkVnYUJIR3RyaEJhQ01YdVRZQUR3YWFiVGJJRDlWZzdoNWExZmQvCjU5aHJqbmNGVDBNQkMyWitIT3E4T2VvT0JrL1JiSDJRTlBHVi9ybjVBb0dBWXQ4KzVRSzJvZHdaTEhVcjl6VnMKVTMzbzA4bGtvMG9vV1FaVldMemtOdk8ySys4M3A1VjZYZXJKNjhLejh1TG9mckc3QWpDbjk1U3dTOGFNOVZodApRYWx5RXJMcEp5Nkc5a3d2bWhtNHM5QW5EbFg3QXJQU2tQK3pybThvU3B6UnhzbWp2Y0dzUmdmV3J6aSsybGRwCnlKZWlwN001TEhUb0hsQU5pTDlob0FFQ2dZRUFyQUJUajlEVVlrcjVDa2pJYUFBbDAxd01uQnhNaHptL1NWcm4KYm04K1N5Qy9WN3UxWjBPMXFWOUkrTUZRQ1JCWDVHemc1QU9LS3VtSUw4ZDkvdDBtb25hOXd2NEp6amZmL2JCNwplK0tlWFFDaGhjV1lzS0pJdEVHck5JZmVndWYvM2VrQ1JaN3RmRlVJRU1EamJTTVZneUkydUkyM08wKzIxOTNWCjN2YnVlaEVDZ1lFQTZYWDh4Z1hBQXNGa1ZpZnRVK21CZ0xNS0VEYXdQZ2xrSHprR0tHL00yVWpYQUk0MnBOVXIKZ3lxazRIQTVQRlg5TkovRkxFUkEvb1cwNUhCVEUyZHFHT1crOTVYdU0vM3NvTDQzVkk0WXIwUXN5dG1zakxpegovb09rbkhqaGZsaUxPZ0VKQzFBS2w0cStYSzhZa2pKL1ZyMGpOVTMvWkpxc29PVTFrSDE5ZXQ0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU01a2VuRWhwWDlSWjFOcjRSMStsbkF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl4TVRJeU9URXhOVFF4TmxvWERUSXlNVEl5T1RFeApOVFF4Tmxvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF0OWpjUkJMaDdHY1Nuek1Da0V6NGVVamcyOHZzN2gzeFdXTXNwQ2s5NXJiR3VRd0EKeUMwMncxZ2hGcCtYUWdWMzVXTzBic0xuTFJhZkZGT2NsSDJZOGlUYUtSMlhFQ1owTHNHd1BSeTM3dTRQWVB1WQozOTdwSTlOeDdhRTN2ZnlFdCsxRGxxSzZQc1grdEUrbjV1eWNZYmFrL2pCV2lJT3NmZzA4MTlIZ0dWaGVza0huCkFPcGZ4Rk1FTzhkM0ppOVpvckdpMEp4eDJUVTNSUTh6TjV6OXN4MXdReGJBemluU0RudEhsOFA3RnhpNDhmaloKM05rMHZJVHZTWmhrT3BNV21qekxIYlovM2s1NnlFUGhGalZDS2ZwcHRYclRSM0tPV2NPNWk1clFWMktaS0xwSAo0ZmRHVllKVDdPQi9LRjEva0ZpZURuY3RmM3pKckF4MVRYQkFad0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUGJXY2ZWTlloeG9pSjVNYmJ1djh2L3p5MnRzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnY5dGdtSzlmZldSQ1FaTGxMa3o1UDM1b0hIZ3RRNitYQnB4S0hUZ2R0djJscnRJQ1MyREtMCnArdmlyS1p3MmEvc1kveDNHeFhuUVhDejhZYllqMmlLQ3BxNUJVMHdyeWR6VmFkUFJmOWdJZXJ0b0ZNZnBmU0QKTG5WSzBMeVJ6aElvbzM2YXVtSmc4bXc3elh2Z05aOEVnREFDNEtabytHd2VVSytwSnVrQnk0UnBMLzM3WEFuRAp6bzRiUFV4T2U3ekRRMG8zamozZ05VRGJzZEwrMkdCV3lpZmtKK0dtdjJzeWpsUy8zTUdjTk91UVcvd0FMT1RECmlGQnZOT2h6Vk9OcG5KZVpTaTU1S1RIZDYwK0VSM1NPM01qWi93d0xoV3hmZ2xwSkt4Q1hNUW5CV2hwV3BTWGcKQXdqdUtwYUVxMVFHQ0FJQ2ZFeUxIalRNRmZ5c0tuNjAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-ingress-notary
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURSakNDQWk2Z0F3SUJBZ0lRWEdPMVNoSzVObFZNNStrdzZTY1ZlVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakV4TWpJNU1URTFOREUzV2hjTk1qSXhNakk1TVRFMQpOREUzV2pBaU1TQXdIZ1lEVlFRREV4ZHViM1JoY25rdWFHRnlZbTl5TG1oaFpHbDBhQzV0WVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUx0cWFRRkg3TURrNzJlQVdsQUd0TEVrQkhzWkREbkUKMDZhYWJHb3FwdmZKT2E2NXM5dXphcmc3WjNTS09YbmNoRFN2VnY2bTZmSUo2azVReWYwQjhialBzbGs0YWlDVwo4ajk0ZG8rdDdGL3JhS2taRnFLaGlXa2pla3puZkNVUDhYUmdRYkRnREV5RjBOd0tDRkhMYnZGOXJrUTFrTmVUCkNPTm5BL2RydmxUcFg3dldFeGt2UGhnT1R1Q0xoYks5VW90SmdxdnVzMld5cllwc0VTOER6K2daMGQ1U0JrQVkKYnl0aFhxNXZJa2NJOXhZRVdaVHZYamxJbkVpbFRxbzQzZnYwUUFQNkpFMzcvV28xV3lCUDJ0SWdNNTF2TGJmagpMS2k1dGdVMW15MGU3SSt4YUtaMmpaUll5SFFTQS8wVXhoaVhkb1VCMzJmOFZKekZkRjg4ZTVjQ0F3RUFBYU9CCmhUQ0JnakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVTl0Wng5VTFpSEdpSW5reHR1Ni95Ly9QTAphMnd3SWdZRFZSMFJCQnN3R1lJWGJtOTBZWEo1TG1oaGNtSnZjaTVvWVdScGRHZ3ViV0V3RFFZSktvWklodmNOCkFRRUxCUUFEZ2dFQkFCcVQ2QVlZMXAyZVdTT1gwN0NLeXhGNUduRlhFYjV1NEZES1ZKZE4raHl1bWlteWpvVnkKK1pDT0MyY2JUY3c3L2pZRTEvUmVIdVZsdDhpNlZlaGlBWEZMMDVKRHNBY2RTL1M4UGd3ZGpMQ3ZDNjRYMXEwQwphZDQwUEtudStPNDFNUklRZDNXNmhqbmg4R1FFVTYwaTJtQXBiQ1hGbVdsbjFwSXJkUElTODlERlhpNDdXSW02CjNYek5CTnBlU0Nmb1ZhL1JVU29RV1RkQUQwZjRpcHc0ZG4wT1hrQm5oTXFma1ZnSHRBa2NZcThWYkRxSVNDV1EKWW01VnU5VXUvVS9XeWZlU3dnMmZFMmErclYwQlp0RDFnT1NDMm5JbmhCODFFTGpmV1M1R0RZejlqSkYrNUJGMAo0MWt6ZUZvNDFDVERCNjNJK0dFMWkvZHV3bHRxOTh0YmVWVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdTJwcEFVZnN3T1R2WjRCYVVBYTBzU1FFZXhrTU9jVFRwcHBzYWlxbTk4azVycm16CjI3TnF1RHRuZElvNWVkeUVOSzlXL3FicDhnbnFUbERKL1FIeHVNK3lXVGhxSUpieVAzaDJqNjNzWCt0b3FSa1cKb3FHSmFTTjZUT2Q4SlEveGRHQkJzT0FNVElYUTNBb0lVY3R1OFgydVJEV1ExNU1JNDJjRDkydStWT2xmdTlZVApHUzgrR0E1TzRJdUZzcjFTaTBtQ3ErNnpaYkt0aW13Ukx3UFA2Qm5SM2xJR1FCaHZLMkZlcm04aVJ3ajNGZ1JaCmxPOWVPVWljU0tWT3FqamQrL1JBQS9va1RmdjlhalZiSUUvYTBpQXpuVzh0dCtNc3FMbTJCVFdiTFI3c2o3Rm8KcG5hTmxGaklkQklEL1JUR0dKZDJoUUhmWi94VW5NVjBYeng3bHdJREFRQUJBb0lCQUgzNExoQVFXZy9sVVEwTwpkcVduZkRnOGIwNldMV04rNm92bTY4d0lVeVhsZVFINkMrdzJFaHMyd25qUWw0VlROUUY4Z1VxMHdqWlBkOCtmCitjUTNWRlBXTnBoRmxQL0d0WmozelNrUnkvbEU3NW9KSk8rM0IvZEZRMlVCaXE0V28wS0htRi9jbUNldklnMWsKS09kaGgzYUY5V1lmWXZXaS9LeHNoM3Y4VFhnZ0krT0VYNWxwWm5NeXk3eE1WZC92RFRFSm1ENmx3Sm5tbzJBZApHYWcxZWFqd0V2Qlo3V1d5OURJMDc2MEFxRUIzNUswU3FqRG9naEdUc3N4MTZoVXpMN0RIVzUybC9TY3VXdW1GClZkT2NreUhOaFdvaThkVUc1WUhBZk5YZ3pZMHZBWHVQcEVEMnJZTWpHVHpwZFcvcG9pTHk4dzllQ3NyNDJKMVoKdkE4SUNvRUNnWUVBOStycXBvSGtuSzdDbTVZUHQrRkZmOHJXcVQwejNBb2hsTEsyRk9sb0NCSDFqb2daNG50VgovOUJibjc2SzVYQTFNbUpobjBIajdkTzAvNmFxNUVCSjdzcmF6KzcvVzQweXREYUZnMFNKNWlNT0sweGpsOXY2ClhjdU9QOUJBTDdxSHIwcTlOVGJBN1pHQnVjZCtweW5XdURQMS83Z04wSEk1R0kvYlBoTy85dUVDZ1lFQXdZYU4KbTNIMnVVZ2pwRHVNSlNjdTluZ2MrRk5TalJDQ1JTVk41c0x2Tmw3TDhId0dQak9xWmg2NS81allBN0YxT3dnTAovY3llYTNmVGlYb1NYaXNMY05Zd1JtZzNJSUJIMXB3a2l5RG56RkNBS3B0Y2sySXFDN1VYMlo0YWxROEFGb096Clp5VHVxekdTdnZCd2J0Zys2Z0pQV0s3anRDZHVNN1F4ZlJ3ODJYY0NnWUJhd1RWckJNdmlpNXNVQjZmellWVG0KeGlNMHl3SE1BQzF3Mk1jTStyQ3BtNkZ2cnVVQzRyR0Z0d21EZmVZc3Zabkx1dllQcmJnNW5MRjZrTkdvUXR5Tgp2TmJESGJOL0dUNUJlR0FCd0xwV2MrakE4dkxXYWFIS2FqVEZxWCtGdVZ2b1VJelpDUlV4SW40QnUwVGkvczdxCm1hTHBITUI1MlFhTHRrWEZBTWZhSVFLQmdBSXFIQmxaKy9WMGpobC9KUUVoWUJBWHBkTk5NMFlxb2hwZDRYSXMKU2Zxa3Nzazh5ZUVXT05pdGpVMERpNTcyOUNXMTRGUjFYbXc3U2QxbXhSL1NnVzFBcUFlUmtOUkhPd1oyZHA0cgp2d3YwOW9vRGROU2RLM1U0RUUwNXpIaFFVNkxzMUN2YUtPVTNSN25rL0l6dzFEdFB6VTFqbjE1YmRvc1RmOTR6Clc2YmZBb0dBQXZBWEdUNDFvZ0M1MnZlWXhUbEc4TitiZ3NpZTByTG51ZWF4TEg5NGVWdlc4b3M2NkU0c2twYVcKTGJocHJEOEpQNFp1UTA1QXRURGs1N05QMWhGMFZXdVBKZVlmZ3FUNm9XMldrblJMUDBZek5PZzh1MVAwMjlOOAoya2tXT0xoUDFTUUk2bGV5R3FFejcvTzdlM2N3bm1YMVpYdVBFeWpVTkJONDd5ZG5IUUU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU01a2VuRWhwWDlSWjFOcjRSMStsbkF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl4TVRJeU9URXhOVFF4TmxvWERUSXlNVEl5T1RFeApOVFF4Tmxvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF0OWpjUkJMaDdHY1Nuek1Da0V6NGVVamcyOHZzN2gzeFdXTXNwQ2s5NXJiR3VRd0EKeUMwMncxZ2hGcCtYUWdWMzVXTzBic0xuTFJhZkZGT2NsSDJZOGlUYUtSMlhFQ1owTHNHd1BSeTM3dTRQWVB1WQozOTdwSTlOeDdhRTN2ZnlFdCsxRGxxSzZQc1grdEUrbjV1eWNZYmFrL2pCV2lJT3NmZzA4MTlIZ0dWaGVza0huCkFPcGZ4Rk1FTzhkM0ppOVpvckdpMEp4eDJUVTNSUTh6TjV6OXN4MXdReGJBemluU0RudEhsOFA3RnhpNDhmaloKM05rMHZJVHZTWmhrT3BNV21qekxIYlovM2s1NnlFUGhGalZDS2ZwcHRYclRSM0tPV2NPNWk1clFWMktaS0xwSAo0ZmRHVllKVDdPQi9LRjEva0ZpZURuY3RmM3pKckF4MVRYQkFad0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUGJXY2ZWTlloeG9pSjVNYmJ1djh2L3p5MnRzTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnY5dGdtSzlmZldSQ1FaTGxMa3o1UDM1b0hIZ3RRNitYQnB4S0hUZ2R0djJscnRJQ1MyREtMCnArdmlyS1p3MmEvc1kveDNHeFhuUVhDejhZYllqMmlLQ3BxNUJVMHdyeWR6VmFkUFJmOWdJZXJ0b0ZNZnBmU0QKTG5WSzBMeVJ6aElvbzM2YXVtSmc4bXc3elh2Z05aOEVnREFDNEtabytHd2VVSytwSnVrQnk0UnBMLzM3WEFuRAp6bzRiUFV4T2U3ekRRMG8zamozZ05VRGJzZEwrMkdCV3lpZmtKK0dtdjJzeWpsUy8zTUdjTk91UVcvd0FMT1RECmlGQnZOT2h6Vk9OcG5KZVpTaTU1S1RIZDYwK0VSM1NPM01qWi93d0xoV3hmZ2xwSkt4Q1hNUW5CV2hwV3BTWGcKQXdqdUtwYUVxMVFHQ0FJQ2ZFeUxIalRNRmZ5c0tuNjAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-jobservice-envvars
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-jobservice
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  secret: "V01sN1J6czRZOEpPNjNNeg=="
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-harbor-registry
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "WFNjUVhRN25aMmN2M1VyTg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/charts/postgresql/templates/extended-config-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-postgresql-extended-configuration
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  namespace: default
data:

  override.conf: |
    max_connections = 1024
---
# Source: harbor/charts/postgresql/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-postgresql-init-scripts
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  namespace: default
data:
  initial-notaryserver.sql: |
    CREATE DATABASE notaryserver;
    CREATE USER server;
    alter user server with encrypted password 'password';
    GRANT ALL PRIVILEGES ON DATABASE notaryserver TO server;
  initial-notarysigner.sql: |
    CREATE DATABASE notarysigner;
    CREATE USER signer;
    alter user signer with encrypted password 'password';
    GRANT ALL PRIVILEGES ON DATABASE notarysigner TO signer;
  initial-registry.sql: |
    CREATE DATABASE registry ENCODING 'UTF8';
    \c registry;
    CREATE TABLE schema_migrations(version bigint not null primary key, dirty boolean not null);
---
# Source: harbor/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.7
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: harbor/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.7
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: harbor/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.7
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-chartmuseum-envvars
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "RELEASE-NAME-redis-master:6379"
  CACHE_REDIS_DB: "3"
  # The user is hardcoded because the core binary has it hardcoded so it is not configurable.
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "true"
  LOG_JSON: "false"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  STORAGE_TIMESTAMP_TOLERANCE: "1s"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/bitnami/data"
---
# Source: harbor/templates/core/core-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-core-envvars
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
data:
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "RELEASE-NAME-postgresql"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "https://harbor.hadith.ma"
  CORE_URL: "http://RELEASE-NAME-harbor-core:80"
  JOBSERVICE_URL: "http://RELEASE-NAME-harbor-jobservice"
  REGISTRY_URL: "http://RELEASE-NAME-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://RELEASE-NAME-harbor-core:80/service/token"
  WITH_NOTARY: "false"
  NOTARY_URL: "http://RELEASE-NAME-harbor-notary-server:4443"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_TRIVY: "false"
  TRIVY_ADAPTER_URL: "http://RELEASE-NAME-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://RELEASE-NAME-harbor-chartmuseum"
  LOG_LEVEL: "debug"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  PORTAL_URL: "http://RELEASE-NAME-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://RELEASE-NAME-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "RELEASE-NAME-harbor-core,RELEASE-NAME-harbor-jobservice,RELEASE-NAME-harbor-database,RELEASE-NAME-harbor-chartmuseum,RELEASE-NAME-harbor-clair,RELEASE-NAME-harbor-notary-server,RELEASE-NAME-harbor-notary-signer,RELEASE-NAME-harbor-registry,RELEASE-NAME-harbor-portal,RELEASE-NAME-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-core
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = "8080"
---
# Source: harbor/templates/jobservice/jobservice-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-jobservice-envvars
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
data:
  CORE_URL: "http://RELEASE-NAME-harbor-core:80"
  TOKEN_SERVICE_URL: "http://RELEASE-NAME-harbor-core:80/service/token"
  REGISTRY_URL: "http://RELEASE-NAME-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://RELEASE-NAME-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "RELEASE-NAME-harbor-core,RELEASE-NAME-harbor-jobservice,RELEASE-NAME-harbor-database,RELEASE-NAME-harbor-chartmuseum,RELEASE-NAME-harbor-clair,RELEASE-NAME-harbor-notary-server,RELEASE-NAME-harbor-notary-signer,RELEASE-NAME-harbor-registry,RELEASE-NAME-harbor-portal,RELEASE-NAME-harbor-trivy,127.0.0.1,localhost,.local,.internal"
  LOG_LEVEL: "debug"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-jobservice
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "RELEASE-NAME-redis-master:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
---
# Source: harbor/templates/portal/portal-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-portal
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: portal
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /opt/bitnami/harbor;
            index  index.html index.htm;
            include /opt/bitnami/nginx/conf/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-registry
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "RELEASE-NAME-redis-master:6379"
      db: 2
    http:
      relativeurls: false
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/trivy/trivy-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-harbor-trivy-envvars
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: trivy
data:
  SCANNER_LOG_LEVEL: "debug"
  SCANNER_TRIVY_CACHE_DIR: "/bitnami/harbor-adapter-trivy/.cache/trivy"
  SCANNER_TRIVY_REPORTS_DIR: "/bitnami/harbor-adapter-trivy/.cache/reports"
  SCANNER_TRIVY_DEBUG_MODE: "false"
  SCANNER_TRIVY_VULN_TYPE: "os,library"
  SCANNER_TRIVY_SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
  SCANNER_TRIVY_IGNORE_UNFIXED: "false"
  SCANNER_TRIVY_SKIP_UPDATE: "false"
  SCANNER_TRIVY_INSECURE: "false"
  SCANNER_API_SERVER_ADDR: ":8080"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "RELEASE-NAME-harbor-core,RELEASE-NAME-harbor-jobservice,RELEASE-NAME-harbor-database,RELEASE-NAME-harbor-chartmuseum,RELEASE-NAME-harbor-clair,RELEASE-NAME-harbor-notary-server,RELEASE-NAME-harbor-notary-signer,RELEASE-NAME-harbor-registry,RELEASE-NAME-harbor-portal,RELEASE-NAME-harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-harbor-chartmuseum
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-harbor-jobservice
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: harbor/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME
    role: primary
---
# Source: harbor/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.7
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: harbor/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.7
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: master
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-harbor-chartmuseum
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
spec:
  ports:
    - port: 80
      name: http
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: chartmuseum
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-harbor-core
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: core
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-harbor-jobservice
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: jobservice
---
# Source: harbor/templates/portal/portal-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-harbor-portal
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: portal
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-harbor-registry
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    app.kubernetes.io/name: harbor
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-harbor-chartmuseum
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/component: chartmuseum
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: chartmuseum
      annotations:
        checksum/configmap-envvars: d71c8c226166aa882c8f117bf7da1b54c03b03e0aa9fb93fcbb548cee69a21ba
        checksum/secret: 47fecde7f247718366e19b688d9908958543e28b623eb2ef0bdfb1691c54e374
        checksum/secret-core: 9a4f9d52a6de04573fdb7ea9b75f4023303bd45880fae0192783b52075d128e8
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: chartmuseum
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: chartmuseum
          image: docker.io/bitnami/chartmuseum:0.13.1-debian-10-r257
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 10
          envFrom:
            - configMapRef:
                name: RELEASE-NAME-harbor-chartmuseum-envvars
            - secretRef:
                name: RELEASE-NAME-harbor-chartmuseum-secret
          env:
            - name: DEBUG
              value: "0"
            - name: BASIC_AUTH_PASS
              valueFrom:
                secretKeyRef:
                  # Take the password from the core component secret
                  name: RELEASE-NAME-harbor-core
                  key: secret
          ports:
            - containerPort: 9999
              name: http
          volumeMounts:
            - name: chartmuseum-data
              mountPath: /bitnami/data
              subPath: 
      volumes:
        - name: chartmuseum-data
          persistentVolumeClaim:
            claimName: RELEASE-NAME-harbor-chartmuseum
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-harbor-core
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: core
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/component: core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: 4145fb3bc5dbefe6d7ba76947837edb85bba116e607615363f0eb92dbf484536
        checksum/configmap-envvars: b4aed5d6217a859b3d222d607c6a936d89123cfe75fc061150dd1f0945636d49
        checksum/secret: 05d4484e51a23e4d4bdf5b2deb2a66dbf8f6b5ab6fd1e00448e2a0b5fd329d81
        checksum/secret-envvars: 7ff87b0ce4fd2a745a4c542866f8468b6b3773ee949b4dbeb993a7e666f9c876
        checksum/secret-jobservice: d904f405805d882d4163c410b644aad4b9caae01163900daa7861efdb26ffe35
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: core
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: core
          image: docker.io/bitnami/harbor-core:2.4.0-debian-10-r46
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          livenessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          startupProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
          envFrom:
            - configMapRef:
                name: RELEASE-NAME-harbor-core-envvars
            - secretRef:
                name: RELEASE-NAME-harbor-core-envvars
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-harbor-jobservice
                  key: secret
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: config
          configMap:
            name: RELEASE-NAME-harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: secret-key
          secret:
            secretName: RELEASE-NAME-harbor-core
            items:
              - key: secretKey
                path: key
        - name: token-service-private-key
          secret:
            secretName: RELEASE-NAME-harbor-core
        - name: ca-download
          secret:
            secretName: RELEASE-NAME-harbor-ingress
        - name: psc
          emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-harbor-jobservice
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/component: jobservice
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-11.1.6
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: jobservice
      annotations:
        checksum/configmap: 5e2fccf8257db8db3e6e1d447fccbaa3bfd92898a066170ab0c70627e506a9bc
        checksum/configmap-env: 4455642f13a3a609d54c1bdbbcdc268ecd3d576b4d18f1b66cde05556a7fcb44
        checksum/secret-env: 3a59eb209af2c5a774ac04b1a96e479834da9e9b0baa080bdfda51c3b3ea109c
        checksum/secret: df6238f9dd5d8381a31935d4b94838867e2c52bb850db84b699d4da720052e1c
        checksum/secret-core: 992411106edca6b3acc32397b7cf8c6b1bbce07100dff8a3372c8b8e1859404d
    spec:
      
      automountServiceAccountToken: false
      priorityClassName: ""
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: jobservice
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: jobservice
          image: docker.io/bitnami/harbor-jobservice:2.4.0-debian-10-r47
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: RELEASE-NAME-harbor-jobservice-envvars
            - secretRef:
                name: RELEASE-NAME-harbor-jobservice-envvars
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
              subPath: 
      volumes:
        - name: jobservice-config
          configMap:
            name: RELEASE-NAME-harbor-jobservice
        - name: job-logs
          persistentVolumeClaim:
            claimName: RELEASE-NAME-harbor-jobservice
---
# Source: harbor/templates/portal/portal-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-harbor-portal
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: portal
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/component: portal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-11.1.6
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: portal
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: portal
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: portal
          image: docker.io/bitnami/harbor-portal:2.4.1-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          resources:
            limits: {}
            requests: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: portal-config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: portal-config
          configMap:
            name: RELEASE-NAME-harbor-portal
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-harbor-registry
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: harbor
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/component: registry
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor
        helm.sh/chart: harbor-11.1.6
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: registry
      annotations:
        checksum/configmap: 1bbc303d0546348c022849ef4a5e062ce6a5d440c268971ca840e76688b16f58
        checksum/secret: b5fff439674325bf1fe898a5ea0735aad981466803083305305ad911a4efde8e
        checksum/secret-jobservice: b7a081474394f427dc6f3936aa0cf9f0fed97d9cd52889bc4f2108f5ac7cc213
        checksum/secret-core: b092a5862281530e8d046c5319de89ab81e2cd5b27c7b8058700814c5cb4b480
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: registry
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: registry
          image: docker.io/bitnami/harbor-registry:2.4.1-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          livenessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: registry
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: registry
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - secretRef:
                name: RELEASE-NAME-harbor-registry
          ports:
            - containerPort: 5000
              name: registry
            - containerPort: 5001
              name: debug
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath: 
            - name: registry-root-certificate
              mountPath: /etc/registry/root.crt
              subPath: tls.crt
            - name: registry-htpasswd
              mountPath: /etc/registry/passwd
              subPath: passwd
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
        - name: registryctl
          image: docker.io/bitnami/harbor-registryctl:2.4.1-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          livenessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: registryctl
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: registryctl
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          envFrom:
            - secretRef:
                name: RELEASE-NAME-harbor-registry
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-harbor-jobservice
                  key: secret
          ports:
            - containerPort: 8080
              name: registryctl
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath: 
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
      volumes:
        - name: registry-htpasswd
          secret:
            secretName: RELEASE-NAME-harbor-registry
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
        - name: registry-root-certificate
          secret:
            secretName: RELEASE-NAME-harbor-core
        - name: registry-config
          configMap:
            name: RELEASE-NAME-harbor-registry
        - name: registry-data
          persistentVolumeClaim:
            claimName: RELEASE-NAME-harbor-registry
---
# Source: harbor/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.14
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: RELEASE-NAME-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: RELEASE-NAME
      role: primary
  template:
    metadata:
      name: RELEASE-NAME-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.13.14
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: RELEASE-NAME-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r17
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: postgresql-extended-config
          configMap:
            name: RELEASE-NAME-postgresql-extended-configuration
        - name: custom-init-scripts
          configMap:
            name: RELEASE-NAME-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: harbor/charts/redis/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.6.7
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/component: master
  serviceName: RELEASE-NAME-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-15.6.7
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 20dff9df5120603d364bb701537da4f6caa74b3cc53aac14b56fea611a68da45
        checksum/health: acf172adf38da0aa5820b1f0058a52db40e3ed83fd5c8eafbe30b8abf01384f3
        checksum/scripts: e42a164744b9d65823160069663f5add1f4c4c8c1fde4ae3d091e7a7f9d740cb
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: RELEASE-NAME-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: master
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r53
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: RELEASE-NAME-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: RELEASE-NAME-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: RELEASE-NAME-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: RELEASE-NAME-harbor-ingress
  labels:
    app.kubernetes.io/name: harbor
    helm.sh/chart: harbor-11.1.6
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - secretName: RELEASE-NAME-harbor-ingress
      hosts:
        - harbor.hadith.ma
  rules:
    - http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: RELEASE-NAME-harbor-portal
                port:
                  name: http
          - path: /api/
            pathType: ImplementationSpecific
            backend:
              service:
                name: RELEASE-NAME-harbor-core
                port:
                  name: http
          - path: /service/
            pathType: ImplementationSpecific
            backend:
              service:
                name: RELEASE-NAME-harbor-core
                port:
                  name: http
          - path: /v2
            pathType: ImplementationSpecific
            backend:
              service:
                name: RELEASE-NAME-harbor-core
                port:
                  name: http
          - path: /chartrepo/
            pathType: ImplementationSpecific
            backend:
              service:
                name: RELEASE-NAME-harbor-core
                port:
                  name: http
          - path: /c/
            pathType: ImplementationSpecific
            backend:
              service:
                name: RELEASE-NAME-harbor-core
                port:
                  name: http
      host: harbor.hadith.ma
