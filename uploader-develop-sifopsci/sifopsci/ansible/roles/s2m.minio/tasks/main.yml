- name: Detect OS Family
  debug:
    msg: "Running on {{ ansible_os_family }}"

# Mettre Ã  jour les politiques de cryptographie (uniquement pour RedHat)
- name: Update Policies (Only for RedHat)
  shell: update-crypto-policies --set LEGACY
  when: ansible_os_family == "RedHat"
  ignore_errors: yes

# Supprimer `runc` sur toutes les distributions
- name: Remove runc (Ubuntu/Debian)
  apt:
    name: runc
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove runc (RedHat)
  dnf:
    name: runc
    state: absent
  when: ansible_os_family == "RedHat"

- name: Remove runc (Alpine)
  apk:
    name: runc
    state: absent
  when: ansible_os_family == "Alpine"

# Supprimer `buildah` sur toutes les distributions
- name: Remove buildah (Ubuntu/Debian)
  apt:
    name: buildah
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove buildah (RedHat)
  dnf:
    name: buildah
    state: absent
  when: ansible_os_family == "RedHat"

- name: Remove buildah (Alpine)
  apk:
    name: buildah
    state: absent
  when: ansible_os_family == "Alpine"

# Supprimer `podman` sur toutes les distributions
- name: Remove podman (Ubuntu/Debian)
  apt:
    name: podman
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove podman (RedHat)
  dnf:
    name: podman
    state: absent
  when: ansible_os_family == "RedHat"

- name: Remove podman (Alpine)
  apk:
    name: podman
    state: absent
  when: ansible_os_family == "Alpine"



# Install iptables on RedHat (CentOS/RHEL)
- name: Install iptables-services (RedHat)
  dnf:
    name: iptables-services
    state: present
  when: ansible_os_family == "RedHat"

# Install iptables on Alpine Linux
- name: Install iptables (Alpine)
  apk:
    name: iptables
    state: present
  when: ansible_os_family == "Alpine"

# Enable and start iptables on RedHat-based systems (uses systemd)
- name: Enable iptables (RedHat)
  systemd:
    name: iptables
    enabled: yes
  when: ansible_os_family == "RedHat"

- name: Start iptables (RedHat)
  systemd:
    name: iptables
    state: started
  when: ansible_os_family == "RedHat"

# Apply iptables rules manually on Ubuntu/Debian (no systemd inside Docker)
- name: Ensure iptables is applied (Ubuntu/Debian)
  shell: |
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -F
  when: ansible_os_family == "Debian"

# Apply iptables rules manually on Alpine Linux (no systemd)
- name: Ensure iptables is applied (Alpine)
  shell: |
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -F
  when: ansible_os_family == "Alpine"

- name: Blacklist ip tables legacy
  kernel_blacklist:
    name: ip_tables
    state: present

- name: Adding harbor to /etc/hosts
  lineinfile:
    dest: "/etc/hosts"
    line: "{{ item.line }}"
    state: present
  with_items:
     - line: "{{ harbor_ip }} {{ harbor_endpoint }}"

- name: copy Harbor CA
  copy:
    src: "{{ platform_files_directory }}/ca-harbor.crt"
    dest: /etc/pki/ca-trust/source/anchors/mycrt.pem
    mode: 0600
  when: harbor_ssl

- name: update ca trust
  shell: "update-ca-trust"
  when: harbor_ssl

- name: Check if Docker is installed
  command: systemctl status docker
  register: docker_check
  ignore_errors: yes

- name: Copy the Docker package
  copy:
    src: docker-20.10.10.tar
    dest: /tmp/docker-20.10.10.tar
    mode: 0700
  when: docker_check.stderr.find('service could not be found') != -1

- name: Extract the docker archive into remote hosts
  unarchive:
    src: /tmp/docker-20.10.10.tar
    dest: /tmp/
    remote_src: yes
  when: docker_check.stderr.find('service could not be found') != -1

- name: Install Docker
  copy:
    src: /tmp/docker/
    dest: /usr/bin/
    remote_src: yes
  when: docker_check.stderr.find('service could not be found') != -1

- name: Copy Docker Units files to /etc/systemd/system
  template:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: 0744
  with_items:
    - docker.service
    - docker.socket
    - containerd.service

- name: Changing the permissions
  file:
    path: "{{ item }}"
    owner: "{{ ansible_user }}"
    mode: '0777'
  with_items:
    - /usr/bin/dockerd
    - /usr/bin/docker-init
    - /usr/bin/runc
    - /usr/bin/ctr
    - /usr/bin/containerd-shim-runc-v2
    - /usr/bin/containerd-shim
    - /usr/bin/docker
    - /usr/bin/containerd
    - /usr/bin/docker-proxy
  ignore_errors: yes

- name: Reload the service files
  command: systemctl daemon-reload
  when: docker_check.stderr.find('service could not be found') != -1

- name: Create docker group
  group:
    name: docker
    state: present
  
- name: Enable the Docker daemon in systemd
  systemd:
    name: docker
    enabled: yes
    masked: no

- name: Start the Docker daemon
  systemd:
    name: docker
    state: started
    masked: no

#- name: Remove the Docker installer file.
#  file:
#    state: absent
#    path: /tmp/docker-20.10.10.tar
#  when: docker_check.stderr.find('service could not be found') != -1

- name: Install Docker compose
  copy:
    src: docker-compose
    dest: /usr/bin/docker-compose
    mode: 0777


# Handle SSL tasks conditionally
- name: copy Harbor CA
  copy:
    src: "{{ platform_files_directory }}/ca-harbor.crt"
    dest: /etc/pki/ca-trust/source/anchors/mycrt.pem
    mode: 0600
  when: harbor_ssl | default(false)




- name: Create the minio configuration file
  local_action:
    module: template
    src: docker-compose.yaml.tmpl
    dest: /app/minio-docker-compose.yaml
    unsafe_writes: yes

- name: Create the minio secret file
  local_action:
    module: template
    src: secret.yaml.tmpl
    dest: "{{ platform_files_directory }}/minio-secret.yaml"
    unsafe_writes: yes
  when: minio_ssl

- name: Create Minio directory if Not Exist
  file:
    path: "{{ minio_data_path }}"
    state: directory

- name: copy minio yml file to destination
  copy:
    src: /app/minio-docker-compose.yaml
    dest: "{{ minio_data_path }}/docker-compose.yaml"
    mode: 0777

- name: Create Minio directory if Not Exist
  file:
    path: "{{ minio_data_path }}/certs"
    state: directory
  when: minio_ssl

- name: copy Minio public key
  copy:
    src: "{{ platform_files_directory }}/minio-cert/public.crt"
    dest: "{{ minio_data_path }}/certs/public.crt"
    mode: 0600
  when: minio_ssl

- name: copy Minio private key
  copy:
    src: "{{ platform_files_directory }}/minio-cert/private.key"
    dest: "{{ minio_data_path }}/certs/private.key"
    mode: 0600
  when: minio_ssl

- name: Start Minio
  shell: 
    cmd: "docker-compose -f docker-compose.yaml up -d"
    chdir: "{{ minio_data_path }}"
  register: compose_up

- name: Check Minio installation status
  shell:
    cmd: "docker-compose ps"
    chdir: "{{ minio_data_path }}"
  when: compose_up.changed
  register: compose_ps
  
- name: List of active Minio containers
  debug: 
    msg: "{{ compose_ps.stdout }}"

- name: Sleep for 30s
  shell: sleep 120
