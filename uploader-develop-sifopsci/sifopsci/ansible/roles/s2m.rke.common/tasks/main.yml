---
# tasks file for omnishorerke.common

- name: Ensure crypto-policies is installed (required for update-crypto-policies)
  dnf:
    name: crypto-policies
    state: present
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS"

- name: Update Policies
  command: update-crypto-policies --set LEGACY
  ignore_errors: yes
  when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS"

# Ensure the correct Python interpreter is used
- name: Set Python interpreter to platform-python (for RHEL-based systems)
  set_fact:
    ansible_python_interpreter: /usr/libexec/platform-python
  when: ansible_os_family == "RedHat"

# Ensure python3-dnf is installed using raw module (it runs commands even if Python is not fully set up)
- name: Install python3-dnf if missing
  raw: yum install -y python3-dnf || dnf install -y python3-dnf
  changed_when: false
  when: ansible_os_family == "RedHat"

# Refresh facts after installing python3-dnf to ensure dnf module can be used
- name: Gather facts again
  setup:

- name: Remove runc
  dnf:
    name: runc
    state: absent
  when: ansible_os_family == "RedHat"

- name: Remove buildah
  dnf:
    name: buildah
    state: absent
  when: ansible_os_family == "RedHat"


- name: Remove podman
  dnf:
    name: podman
    state: absent

- name: Install required NFS dependencies
  dnf:
    name: nfs-utils
    state: present

- name: Install iptables services
  dnf:
    name: iptables-services
    state: present

- name: Install tar
  dnf:
    name: tar
    state: present

- name: Enable and start iptables
  systemd:
    name: iptables
    enabled: yes
    state: started

- name: Install open-iscsi package
  dnf:
    name: iscsi-initiator-utils
    state: present

- name: Enable and start open-iscsi service
  systemd:
    name: iscsi
    enabled: yes
    state: started

- name: Blacklist ip_tables module
  modprobe:
    name: ip_tables
    state: absent

- name: Adding Harbor to /etc/hosts
  lineinfile:
    path: "/etc/hosts"
    line: "{{ harbor_ip }} {{ harbor_endpoint }}"
    state: present

- name: Copy Harbor CA certificate
  copy:
    src: "{{ platform_files_directory }}/ca-harbor.crt"
    dest: /etc/pki/ca-trust/source/anchors/mycrt.pem
    mode: 0600
  when: harbor_ssl

- name: Update CA trust
  command: update-ca-trust
  when: harbor_ssl

- name: Elasticsearch prerequisites
  sysctl:
    name: vm.max_map_count
    value: '262144'
    state: present

- name: Elasticsearch file limit
  sysctl:
    name: fs.file-max
    value: '65536'
    state: present

- name: Check if Docker is installed
  command: systemctl status docker
  register: docker_check
  ignore_errors: yes

- name: Copy and extract Docker package if missing
  block:
    - name: Copy the Docker package
      copy:
        src: docker-20.10.10.tar
        dest: /tmp/docker-20.10.10.tar
        mode: 0700

    - name: Extract Docker archive
      unarchive:
        src: /tmp/docker-20.10.10.tar
        dest: /tmp/
        remote_src: yes

    - name: Install Docker
      copy:
        src: /tmp/docker/
        dest: /usr/bin/
        remote_src: yes
  when: docker_check.stderr.find('service could not be found') != -1

- name: Copy Docker systemd service files
  template:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: 0744
  with_items:
    - docker.service
    - docker.socket
    - containerd.service

- name: Reload systemd
  command: systemctl daemon-reload

- name: Create Docker group
  group:
    name: docker
    state: present

- name: Enable and start Docker service
  systemd:
    name: docker
    enabled: yes
    state: started
    masked: no

- name: Remove Docker installer file
  file:
    path: /tmp/docker-20.10.10.tar
    state: absent
  when: docker_check.stderr.find('service could not be found') != -1

- name: Add RKE admin user to Docker group
  user:
    name: "{{ ansible_user }}"
    shell: /bin/bash
    groups: docker
    append: yes

- name: Create sudo file for the user
  file:
    path: /etc/sudoers.d/{{ ansible_user }}
    state: touch

- name: Grant passwordless sudo to the user
  lineinfile:
    path: /etc/sudoers.d/{{ ansible_user }}
    line: '{{ ansible_user }} ALL=(ALL:ALL) NOPASSWD: ALL'
    state: present

- name: Set authorized SSH key
  authorized_key:
    user: "{{ ansible_user }}"
    state: present
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: Load kernel modules for RKE
  modprobe:
    name: "{{ item }}"
    state: present
  with_items: "{{ kernel_modules }}"
  ignore_errors: yes

- name: Disable SWAP temporarily
  command: swapoff -a

- name: Disable SWAP in fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+.*)$'
    replace: '# \1'

- name: Configure sysctl settings
  sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - {key: net.bridge.bridge-nf-call-ip6tables, value: 1}
    - {key: net.bridge.bridge-nf-call-iptables, value: 1}
    - {key: net.bridge.bridge-nf-call-arptables, value: 1}
    - {key: net.ipv4.ip_forward, value: 1}

- name: Harden SSHD configuration
  lineinfile:
    path: "/etc/ssh/sshd_config"
    regexp: "^AllowTcpForwarding "
    line: "AllowTcpForwarding yes"
    state: present
    validate: "sshd -t -f %s"

- name: Restart SSHD service
  systemd:
    name: sshd
    state: restarted
