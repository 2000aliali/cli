---
# tasks file for omnishorerke.common
- name: Update Policies
  shell: update-crypto-policies --set LEGACY
  ignore_errors: yes 

- name: runc
  dnf:
    name: runc
    state: absent

- name: buildah
  dnf:
    name: buildah
    state: absent

- name: podman
  dnf:
    name: podman
    state: absent

- name: tar service
  dnf:
    name: ['tar']
    state: present

- name: iptables services
  dnf:
    name: ['iptables-services']
    state: present

- name: enable iptables
  systemd:
    name: iptables
    enabled: yes
   
- name: start iptables
  systemd:
    name: iptables
    state: started

- name: Adding harbor to /etc/hosts
  lineinfile:
    dest: "/etc/hosts"
    line: "{{ item.line }}"
    state: present
  with_items:
     - line: "127.0.0.1 {{ harbor_endpoint }}"

- name: copy Harbor CA
  copy:
    src: "{{ platform_files_directory }}/ca-harbor.crt"
    dest: /etc/pki/ca-trust/source/anchors/mycrt.pem
    mode: 0600
  when: harbor_ssl

- name: Creates directory harbor directory
  file:
    path: "{{ harbor_data_path }}/cert"
    state: directory
  when: harbor_ssl

- name: copy Harbor crt certificate
  copy:
    src: "{{ platform_files_directory }}/{{ harbor_endpoint }}.crt"
    dest: "{{ harbor_data_path }}/cert/{{ harbor_endpoint }}.crt"
    mode: 0600
  when: harbor_ssl

- name: copy Harbor key certificate
  copy:
    src: "{{ platform_files_directory }}/{{ harbor_endpoint }}.key"
    dest: "{{ harbor_data_path }}/cert/{{ harbor_endpoint }}.key"
    mode: 0600
  when: harbor_ssl

- name: update ca trust
  shell: "update-ca-trust"
  when: harbor_ssl

- name: Check if Docker is installed
  command: systemctl status docker
  register: docker_check
  ignore_errors: yes

- name: Copy the Docker package
  copy:
    src: docker-20.10.10.tar
    dest: /tmp/docker-20.10.10.tar
    mode: 0700
  when: docker_check.stderr.find('service could not be found') != -1

- name: Extract the docker archive into remote hosts
  unarchive:
    src: /tmp/docker-20.10.10.tar
    dest: /tmp/
    remote_src: yes
  when: docker_check.stderr.find('service could not be found') != -1

- name: Install Docker
  copy:
    src: /tmp/docker/
    dest: /usr/bin/
    remote_src: yes
  when: docker_check.stderr.find('service could not be found') != -1

- name: Copy Docker Units files to /etc/systemd/system
  template:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0777
  with_items:
    - docker.service
    - docker.socket
    - containerd.service
  when: docker_check.stderr.find('service could not be found') != -1

- name: Changing the permissions      
  file:
     path: "{{ item }}"
     owner: "{{ ansible_user }}"
     mode: 0777
  with_items:
    - /usr/bin/dockerd
    - /usr/bin/docker-init
    - /usr/bin/runc
    - /usr/bin/ctr
    - /usr/bin/containerd-shim-runc-v2
    - /usr/bin/containerd-shim
    - /usr/bin/docker
    - /usr/bin/containerd
    - /usr/bin/docker-proxy

- name: Reload the service files
  command: systemctl daemon-reload
  when: docker_check.stderr.find('service could not be found') != -1

- name: Create docker group
  group:
    name: docker
    state: present
  
- name: Enable the Docker daemon in systemd
  systemd:
    name: docker
    enabled: yes
    masked: no

- name: Start the Docker daemon
  systemd:
    name: docker
    state: started
    masked: no

- name: Remove the Docker installer file.
  file:
    state: absent
    path: /tmp/docker-20.10.10.tar
  when: docker_check.stderr.find('service could not be found') != -1

- name: Install Docker compose
  copy:
    src: docker-compose
    dest: /usr/bin/docker-compose
    mode: 0777

- name: Create the harbor configuration file
  local_action:
    module: template
    src: harbor.yml.tmpl
    dest: /app/harbor.yml
    unsafe_writes: yes

- name: Check if harbor package exist on remote host
  stat:
    path: /tmp/harbor-offline-installer-v2.5.2.tgz
  register: harbor_package

- name: Copy the harbor package
  copy:
    src: "{{ platform_directory  }}/harbor-offline-installer-v2.5.2.tgz"
    dest: /tmp/harbor-offline-installer-v2.5.2.tgz
    mode: 0700
  when: not harbor_package.stat.exists

- name: Extract the harbor archive into remote hosts
  unarchive:
    src: /tmp/harbor-offline-installer-v2.5.2.tgz
    dest: "{{ harbor_data_path }}/"
    remote_src: yes
  when: not harbor_package.stat.exists

- name: copy harbor yml file to destination
  copy:
    src: /app/harbor.yml
    dest: "{{ harbor_data_path }}/harbor/harbor.yml"
    mode: 0777

- name: Setup Harbor (Docker registry) with support for Helm chart repositories
  command: "{{ harbor_data_path }}/harbor/prepare --with-chartmuseum"
  register: harbor_prepare

- name: Start Harbor
  shell: 
    cmd: "docker-compose -f docker-compose.yml up -d"
    chdir: "{{ harbor_data_path }}/harbor"
  when: harbor_prepare.changed
  register: compose_up

- name: Check Harbor installation status
  shell:
    cmd: "docker-compose ps"
    chdir: "{{ harbor_data_path }}/harbor"
  when: compose_up.changed
  register: compose_ps
  
- name: List of active Harbor containers
  debug: msg="{{ compose_ps.stdout }}"

- name: Emit Harbor URL
  command: echo "Harbor can be accessed at, {{ harbor_ep_ssl }}"
  when: compose_up.changed
  register: harbor_url

- name: Harbor URL info
  debug: msg="{{ harbor_url.stdout }}"   

- name: Sleep for 60s
  shell: sleep 120

- name: Harbor URL info
  debug: msg="{{ harbor_password }}"   

- name: Create Rancher Harbor Project
  uri:
    url: "{{ harbor_ep_ssl }}/api/v2.0/projects"
    user: admin
    password: "{{ harbor_password }}"
    force_basic_auth: yes
    status_code: 201
    method: POST
    src: rancher.json  
    validate_certs: no
    headers:
      Content-Type: "application/json"
       
- name: Create quay.io Harbor Project
  uri:
    url: "{{ harbor_ep_ssl }}/api/v2.0/projects"
    user: admin
    password: "{{ harbor_password }}"
    force_basic_auth: yes
    status_code: 201
    method: POST
    validate_certs: no
    src: quay.json
    headers:
      Content-Type: "application/json"

- name: Create Push Payment Harbor Project
  uri:
    url: "{{ harbor_ep_ssl }}/api/v2.0/projects"
    user: admin
    password: "{{ harbor_password }}"
    force_basic_auth: yes
    status_code: 201
    validate_certs: no
    method: POST
    src: pp.json
    headers:
      Content-Type: "application/json"

- name: Create Middleware Harbor Project
  uri:
    url: "{{ harbor_ep_ssl }}/api/v2.0/projects"
    user: admin
    password: "{{ harbor_password }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: 201
    method: POST
    src: middleware.json
    headers:
      Content-Type: "application/json"

- name: Create Minio Harbor Project
  uri:
    url: "{{ harbor_ep_ssl }}/api/v2.0/projects"
    user: admin
    password: "{{ harbor_password }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: 201
    method: POST
    src: minio.json
    headers:
      Content-Type: "application/json"
